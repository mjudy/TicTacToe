package proj4;

/**
 * A simple representation of tic tac toe. Generates a custom hash code of the board for use in a hash table.
 *
 * @author Mark Judy
 * @version 1.0 Date: 4/23/14 Time: 8:54 PM
 */
public class TicTacToe
{
    private static final int ROWS = 3;
    private static final int COLUMNS = 3;

    private char[][] board;
    private char player1;
    private char player2;
    private int turn;

    /**
     * Default constructor for the tic tac toe game. Sets the board size to defaults and the turn counter to 1.
     */
    public TicTacToe()
    {
        board = new char[ROWS][COLUMNS];
        turn = 1;
    }

    /**
     * A constructor to create a tic tac toe game from a given board state and turn.
     *
     * @param boardStr The board state to create the new game from
     * @param turn the turn that the board state begins on
     */
    public TicTacToe(String boardStr, int turn)
    {
        boardStr = boardStr.replaceAll("\n", "");
        boardStr = boardStr.replaceAll("\\|", "");
        board = new char[ROWS][COLUMNS];
        int index = 0;
        for(int i = 0; i < 3; i++)
        {
            for(int j = 0; j < 3; j++)
            {
                if(boardStr.charAt(index) != 0)
                    board[i][j] = boardStr.charAt(index++);
            }
        }
        this.turn = turn;
    }

    /**
     * Sets the marker for a given player.
     *
     * @param mark The character to be used as a marker.
     * @param player The player to whom the marker belongs.
     */
    public void setPlayerMark(char mark, int player)
    {
        if(player == 1)
        {
            player1 = mark;
        }
        else if(player == 2)
        {
            player2 = mark;
        }
    }

    /**
     * Checks to see if a player won the game and returns the number of the player who won.
     *
     * @return Returns 1 or 2 to represent players 1 and 2. Returns -1 if there is no winner.
     */
    public int isOver()
    {
        if(checkWin(player1))
        {
            return 1;
        }
        else if(checkWin(player2))
        {
            return 2;
        }
        else
            return -1;
    }

    /**
     * Generates a hash code based on the state of the board. Each board location has been assigned a unique prime number
     * to indicate the uniqueness of that location. This prevents an X in any given corner from being interpreted as an
     * X in a different corner by mistake.
     *
     * @return the hash code generated by the function
     */
    public int hashCode()
    {
        int hash = 0;
        for(int i = 0; i < 3; i++)
        {
            for(int j = 0; j < 3; j++)
            {
                if(board[i][j] != 0)
                {
                    if(i == 0 && j == 0)
                        hash += board[i][j] + 11;
                    if(i == 1 && j == 0)
                        hash += board[i][j] + 13;
                    if(i == 2 && j == 0)
                        hash += board[i][j] + 17;
                    if(i == 0 && j == 1)
                        hash += board[i][j] + 19;
                    if(i == 1 && j == 1)
                        hash += board[i][j] + 23;
                    if(i == 2 && j == 1)
                        hash += board[i][j] + 29;
                    if(i == 0 && j == 2)
                        hash += board[i][j] + 31;
                    if(i == 1 && j == 2)
                        hash += board[i][j] + 37;
                    if(i == 2 && j == 2)
                        hash += board[i][j] + 41;
                }
            }
        }
        return hash;
    }

    /**
     * Makes a move on the current tic tac toe board.
     *
     * @param row The row in which to make the move
     * @param column The column in which to make the move
     * @return Returns true if the move was made successfully, otherwise returns false.
     */
    public boolean move(int row, int column)
    {
        if(board[row][column] == 0)
        {
            if(turn == 1)
            {
                board[row][column] = player1;
                turn = 2;
            }
            else if (turn == 2)
            {
                board[row][column] = player2;
                turn = 1;
            }
            return true;
        }
        else
            return false;
    }

    /**
     * Determines what player is at a given location on the tic tac toe board.
     *
     * @param row The row of the tic tac toe board to check
     * @param column The column of the tic tac toe board to check
     * @return Returns the player number at the given location. Returns 0 if no player has made a move at the location.
     */
    public int playerAt(int row, int column)
    {
        if (board[row][column] == player1)
            return 1;
        else if (board[row][column] == player2)
            return 2;
        else
            return 0;
    }

    /**
     * Checks the various win conditions for a given player.
     *
     * @param player The player whose win is being considered.
     * @return Returns true if the given player has won, otherwise returns false.
     */
    private boolean checkWin(char player)
    {
        if(board[0][0] == player && board[0][1] == player && board[0][2] == player)
            return true;
        else if(board[1][0] == player && board[1][1] == player && board[1][2] == player)
            return true;
        else if(board[2][0] == player && board[2][1] == player && board[2][2] == player)
            return true;
        else if(board[0][0] == player && board[1][0] == player && board[2][0] == player)
            return true;
        else if(board[0][1] == player && board[1][1] == player && board[2][1] == player)
            return true;
        else if(board[0][2] == player && board[1][2] == player && board[2][2] == player)
            return true;
        else if(board[0][0] == player && board[1][1] == player && board[2][2] == player)
            return true;
        else if(board[0][2] == player && board[1][1] == player && board[2][0] == player)
            return true;
        else
            return false;
    }

    public int emptyCount()
    {
        int count = 0;
        for(char[] a : board)
        {
            for(char c : a)
            {
                if(c == 0)
                {
                    count++;
                }
            }
        }

        return count;
    }

    /**
     * Determines which players turn it is currently.
     *
     * @return the player number who is currently taking their turn
     */
    public int getTurn()
    {
        return turn;
    }

    public void printBoard()
    {
        System.out.println("-------");
        System.out.print(toString());
    }

    /**
     * This method creates a string representation of the tic tac toe board.
     *
     * @return a string representation of this object
     */
    @Override
    public String toString()
    {
        String str = " ";
        str += board[0][0] + "|" + board[0][1] + "|" + board[0][2] + "\n ";
        str += board[1][0] + "|" + board[1][1] + "|" + board[1][2] + "\n ";
        str += board[2][0] + "|" + board[2][1] + "|" + board[2][2] + "\n";
        return str;
    }
}
